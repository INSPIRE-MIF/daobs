#
# Copyright 2014-2016 European Environment Agency
#
# Licensed under the EUPL, Version 1.1 or â€“ as soon
# they will be approved by the European Commission -
# subsequent versions of the EUPL (the "Licence");
# You may not use this work except in compliance
# with the Licence.
# You may obtain a copy of the Licence at:
#
# https://joinup.ec.europa.eu/community/eupl/og_page/eupl
#
# Unless required by applicable law or agreed to in
# writing, software distributed under the Licence is
# distributed on an "AS IS" basis,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied.
# See the Licence for the specific language governing
# permissions and limitations under the Licence.
#

## Tasks / DB validation configuration
# Validation task save results in data.dir/validation-checker_data/tasks
data.dir=target

# The Solr server URL
solr.server.url=${solr.url}
solr.core.data=${solr.core.data}

# Solr server credentials
solr.server.user=${webapp.username}
solr.server.password=${webapp.password}

# Start the command line interface - The task will start when the route starts
task.db-validation-checker.startup.cli=true

# Start the task when a JMS message is sent to the queue
task.db-validation-checker.startup.jms=false


# Time in ms to poll for new associations to index.
task.db-validation-checker.delay=10000

# The search filter (ie. a Solr query). See validation-checker for other options
task.db-validation-checker.filter=+documentType:metadata
#task.db-validation-checker.filter=+documentType:metadata -isValid:[* TO *]

# The field to return in the response needed by the task
task.db-validation-checker.fields=id

# Number of records per page
task.db-validation-checker.records.per.page=200


# Database url
task.db-validation-checker.db.url=jdbc:postgresql://localhost:5432/catalog
task.db-validation-checker.db.driverClassName=org.postgresql.Driver
task.db-validation-checker.db.username=postgres
task.db-validation-checker.db.password=postgres
# Database query to retrieve validation status for a metadata record
# For a GeoNetwork database use
task.db-validation-checker.db.sql.selectMetadataValidationResultQuery=SELECT status \
  FROM validation v, metadata m \
  WHERE v.metadataId = m.id AND \
   m.uuid = ? AND \
   v.valType = 'schematron-rules-inspire'
# Value indicating a valid metadata record
task.db-validation-checker.db.validRuleResult=1

# ... or customize the query for you DB
#task.db-validation-checker.db.sql.selectMetadataValidationResultQuery=select mdv_rule_result from geocat.md_validation_results mdvr, geocat.metadata md where md.uuid = ? and mdvr.mdv_md_id = md.id and mdvr.mdv_rule_title='INSPIRE'
#task.db-validation-checker.db.validRuleResult=Metadonnee conforme
