<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2014-2016 European Environment Agency

    Licensed under the EUPL, Version 1.1 or â€“ as soon
    they will be approved by the European Commission -
    subsequent versions of the EUPL (the "Licence");
    You may not use this work except in compliance
    with the Licence.
    You may obtain a copy of the Licence at:

    https://joinup.ec.europa.eu/community/eupl/og_page/eupl

    Unless required by applicable law or agreed to in
    writing, software distributed under the Licence is
    distributed on an "AS IS" basis,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
    either express or implied.
    See the Licence for the specific language governing
    permissions and limitations under the Licence.

-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:cm="http://camel.apache.org/schema/spring"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring
        http://camel.apache.org/schema/spring/camel-spring.xsd">

  <bean id="bridgePropertyPlaceholder"
        class="org.apache.camel.spring.spi.BridgePropertyPlaceholderConfigurer">
    <property name="location" value="/WEB-INF/config.properties"/>
  </bean>

  <bean id="inspireValidationClient"
        class="org.daobs.tasks.validation.inspire.OnlineServiceValidatorBean">
    <property name="inspireResourceTesterUrl"
              value="${task.validation-checker.inspire.validator.url}"/>
    <property name="threshold"
              value="${task.validation-checker.inspire.threshold}"/>
    <property name="probeDataResourceLocators"
              value="${task.validation-checker.inspire.probeDataResourceLocators}"/>
    <property name="probeNetworkServices"
              value="${task.validation-checker.inspire.probeNetworkServices}"/>
  </bean>

  <bean id="validationPagination" class="org.daobs.routing.utility.Pagination">
    <property name="recordsPerPage"
              value="${task.validation-checker.records.per.page}"/>
  </bean>
  <bean id="nullBodyStrategy"
        class="org.daobs.routing.utility.NullBodyStrategy"/>
  <bean id="utility" class="org.daobs.routing.utility.Utility"/>
  <bean id="urlEncoder" class="java.net.URLEncoder"/>

  <cm:errorHandler id="loggingErrorHandler"
                   type="LoggingErrorHandler"
                   logName="daobs.tasks.validation-checker"
                   level="DEBUG"/>

  <cm:camelContext
    xmlns:gmd="http://www.isotc211.org/2005/gmd"
    xmlns:gco="http://www.isotc211.org/2005/gco"
    xmlns:geoportal="http://inspire.ec.europa.eu/schemas/geoportal/1.0"
    id="task.validation-checker"
    errorHandlerRef="loggingErrorHandler"
    useMDCLogging="true">

    <cm:threadPoolProfile id="myDefaultProfile"
                          defaultProfile="true"
                          poolSize="10"
                          maxPoolSize="10"/>

    <cm:onException>
      <cm:exception>
        org.apache.camel.component.http4.HttpOperationFailedException
      </cm:exception>
      <cm:continued>
        <cm:constant>true</cm:constant>
      </cm:continued>
      <cm:log message="Oops, something went wrong: $simple{exception.message}."
              loggingLevel="ERROR"
              logName="org.daobs.task.ValidationChecker"/>
      <cm:log message="$simple{exception.responseBody}"
              loggingLevel="ERROR"
              logName="org.daobs.task.ValidationChecker"/>
      <cm:log message="$simple{exception.stacktrace}"
              loggingLevel="ERROR"
              logName="org.daobs.task.ValidationChecker"/>
      <cm:to uri="log:org.daobs.task.ValidationChecker?showBody=true"/>
    </cm:onException>


    <cm:route id="route-task-validate"
              autoStartup="{{task.validation-checker.startup.cli}}">
      <cm:from uri="timer://start?repeatCount=1"/>
      <cm:setHeader headerName="documentFilter">
        <cm:simple>{{task.validation-checker.filter}}</cm:simple>
      </cm:setHeader>
      <cm:to uri="direct:task-validate-start"/>
    </cm:route>

    <cm:route id="route-task-validate-start"
              autoStartup="{{task.validation-checker.startup.jms}}">
      <cm:from uri="activemq:task-validate"/>
      <cm:setHeader headerName="documentFilter">
        <cm:groovy>'{{task.validation-checker.filter}}' + ' ' + exchange.in.body.trim()</cm:groovy>
      </cm:setHeader>
      <cm:to uri="direct:task-validate-start"/>
    </cm:route>


    <cm:route id="route-task-validate-check-regularly"
              autoStartup="{{task.validation-checker.startup.background}}">
      <cm:from
        uri="quartz2://task-validate/check-not-validated-records?cron={{task.validation-checker.background.frequency}}"/>
      <!--<cm:to uri="direct:task-validate-start"/>-->
      <cm:log
        message="Background validation starts (frequency: {{task.validation-checker.background.frequency}})."
        loggingLevel="INFO"
        logName="org.daobs.task.ValidationChecker"/>

      <cm:setHeader headerName="CamelHttpMethod">
        <cm:constant>GET</cm:constant>
      </cm:setHeader>
      <cm:setHeader headerName="Exchange.HTTP_URI">
        <cm:simple>{{solr.server.url}}/{{solr.core.data}}/select</cm:simple>
      </cm:setHeader>
      <cm:setHeader headerName="Exchange.HTTP_QUERY">
        <cm:groovy>'q=' + URLEncoder.encode('{{task.validation-checker.background.filter}}', 'UTF-8') + '&amp;fl={{task.validation-checker.fields}}&amp;wt=xml&amp;sort=id+asc&amp;start=0&amp;rows={{task.validation-checker.background.records}}'</cm:groovy>
      </cm:setHeader>
      <cm:to
        uri="http4://solr.server.url?authUsername={{solr.server.user}}&amp;authPassword={{solr.server.password}}&amp;authenticationPreemptive=true&amp;throwExceptionOnFailure=false"/>
      <cm:convertBodyTo type="org.w3c.dom.Document"/>
      <cm:setHeader headerName="numberOfRecordsMatched">
        <cm:xpath resultType="java.lang.String">
          //result/@numFound
        </cm:xpath>
      </cm:setHeader>
      <cm:choice>
        <cm:when>
          <cm:xpath>//result/@numFound and //result/@numFound > 0</cm:xpath>
          <cm:log
            message="$simple{header.numberOfRecordsMatched} record(s) with no validation info. Processing the first {{task.validation-checker.background.records}} in background."
            loggingLevel="INFO"
            logName="org.daobs.task.ValidationChecker"/>

          <cm:split parallelProcessing="true" strategyRef="nullBodyStrategy">
            <cm:xpath>//doc</cm:xpath>
            <!-- Retrieve UUID from Solr response -->
            <cm:setHeader headerName="documentIdentifier">
              <cm:xpath resultType="java.lang.String">doc/str[@name = 'id']
              </cm:xpath>
            </cm:setHeader>
            <!-- Compute filename suffix for saving update queries -->
            <cm:setHeader headerName="stringToEncrypt">
              <cm:simple>$simple{header.documentIdentifier}</cm:simple>
            </cm:setHeader>
            <cm:setHeader headerName="fileNameSuffix">
              <cm:simple>bean:utility?method=encrypt</cm:simple>
            </cm:setHeader>
            <!-- Retrieve XML document from Solr document -->
            <cm:setBody>
              <cm:xpath resultType="java.lang.String">doc/str[@name =
                'document']/text()
              </cm:xpath>
            </cm:setBody>
            <cm:log
              message="Record identifier is '$simple{header.documentIdentifier}'. Query file name suffix is '$simple{header.fileNameSuffix}'."
              loggingLevel="INFO"
              logName="org.daobs.task.ValidationChecker"/>

            <cm:to uri="direct:validation-inspire"/>
          </cm:split>
        </cm:when>
      </cm:choice>
    </cm:route>


    <cm:route id="route-get-non-validated-records">
      <cm:description>
        Query document having no validation status
        +documentType:metadata -isValid:[* TO *]

        Do HTTP query using
        http://localhost:8983/solr/data/select?q=%2BdocumentType%3Ametadata+-isValid%3A%5B*+TO+*%5D&amp;fl=document%2Cid&amp;wt=xml&amp;indent=true

        Loop on all records.

        Check against the XSD.
      </cm:description>
      <cm:from uri="direct:task-validate-start"/>

      <cm:log message="Background task checking document validation status ..."
              loggingLevel="INFO"
              logName="org.daobs.task.ValidationChecker"/>


      <!-- Get number of records to validate -->
      <cm:removeHeaders pattern="harvesterName"/>
      <cm:setHeader headerName="CamelHttpMethod">
        <cm:constant>GET</cm:constant>
      </cm:setHeader>
      <cm:setHeader headerName="Exchange.HTTP_URI">
        <cm:simple>{{solr.server.url}}/{{solr.core.data}}/select</cm:simple>
      </cm:setHeader>
      <cm:setHeader headerName="Exchange.HTTP_QUERY">
        <cm:groovy>'q=' + URLEncoder.encode(exchange.in.headers.documentFilter, 'UTF-8') + '&amp;fl={{task.validation-checker.fields}}&amp;wt=xml&amp;start=0&amp;rows=0'</cm:groovy>
      </cm:setHeader>
      <cm:to
        uri="http4://solr.server.url?authUsername={{solr.server.user}}&amp;authPassword={{solr.server.password}}&amp;authenticationPreemptive=true&amp;throwExceptionOnFailure=false"/>
      <cm:convertBodyTo type="org.w3c.dom.Document"/>
      <cm:setHeader headerName="numberOfRecordsMatched">
        <cm:xpath resultType="java.lang.String">
          //result/@numFound
        </cm:xpath>
      </cm:setHeader>
      <cm:log
        message="$simple{header.numberOfRecordsMatched} record(s) to validate."
        loggingLevel="INFO"
        logName="org.daobs.task.ValidationChecker"/>

      <cm:split parallelProcessing="false" strategyRef="nullBodyStrategy">
        <cm:method bean="validationPagination" method="getPages"/>
        <cm:setHeader headerName="start">
          <cm:simple>${bean:validationPagination?method=getStart}</cm:simple>
        </cm:setHeader>
        <cm:setHeader headerName="row">
          <cm:simple>{{task.validation-checker.records.per.page}}</cm:simple>
        </cm:setHeader>
        <cm:log
          message="Validating page #$simple{property.CamelSplitIndex} - start: $simple{header.start} | row: $simple{header.row} | total: $simple{header.numberOfRecordsMatched}."
          loggingLevel="INFO"
          logName="org.daobs.task.ValidationChecker"/>

        <cm:setHeader headerName="CamelHttpMethod">
          <cm:constant>GET</cm:constant>
        </cm:setHeader>
        <!-- TODO: Improve that part because the number of records to be validated
        will change over time if isValid is in the search filter and
        the paging can't be used as such. It would have been
        better to grab the set of ids to validate and loop over them. -->
        <cm:setHeader headerName="Exchange.HTTP_URI">
          <cm:simple>{{solr.server.url}}/{{solr.core.data}}/select</cm:simple>
        </cm:setHeader>
        <cm:setHeader headerName="Exchange.HTTP_QUERY">
          <cm:groovy>'q=' + URLEncoder.encode(exchange.in.headers.documentFilter, 'UTF-8') + '&amp;fl={{task.validation-checker.fields}}&amp;wt=xml&amp;sort=id+asc&amp;start=' + exchange.in.headers.start + '&amp;rows=' + exchange.in.headers.row</cm:groovy>
        </cm:setHeader>
        <cm:to
          uri="http4://solr.server.url?authUsername={{solr.server.user}}&amp;authPassword={{solr.server.password}}&amp;authenticationPreemptive=true&amp;throwExceptionOnFailure=false"/>
        <cm:convertBodyTo type="org.w3c.dom.Document"/>
        <cm:split parallelProcessing="true" strategyRef="nullBodyStrategy">
          <cm:xpath>//doc</cm:xpath>
          <!-- Retrieve UUID from Solr response -->
          <cm:setHeader headerName="documentIdentifier">
            <cm:xpath resultType="java.lang.String">doc/str[@name = 'id']
            </cm:xpath>
          </cm:setHeader>
          <!-- Compute filename suffix for saving update queries -->
          <cm:setHeader headerName="stringToEncrypt">
            <cm:simple>$simple{header.documentIdentifier}</cm:simple>
          </cm:setHeader>
          <cm:setHeader headerName="fileNameSuffix">
            <cm:simple>bean:utility?method=encrypt</cm:simple>
          </cm:setHeader>
          <!-- Retrieve XML document from Solr document -->
          <cm:setBody>
            <cm:xpath resultType="java.lang.String">doc/str[@name =
              'document']/text()
            </cm:xpath>
          </cm:setBody>


          <cm:log
            message="Record identifier is '$simple{header.documentIdentifier}'. Query file name suffix is '$simple{header.fileNameSuffix}'."
            loggingLevel="INFO"
            logName="org.daobs.task.ValidationChecker"/>

          <cm:multicast parallelProcessing="false"
                        strategyRef="nullBodyStrategy">
            <!-- XSD validation-->
            <cm:to uri="direct:validation-xsd"/>

            <!-- INSPIRE validation -->
            <cm:to uri="direct:validation-inspire"/>
          </cm:multicast>
        </cm:split>
      </cm:split>
      <cm:log message="Validation terminated."
              loggingLevel="INFO"
              logName="org.daobs.task.ValidationChecker"/>
    </cm:route>


    <cm:route id="route-validation-xsd-checker">
      <!--
      Check from file
      <cm:from uri="file:src/test/resources/?fileName=*.xml&amp;noop=true&amp;consumer.delay=100000"/>-->
      <cm:from uri="direct:validation-xsd"/>
      <cm:setHeader headerName="beginTime">
        <cm:simple>${date:now:yyyyMMdd'T'HH':'mm':'SS}</cm:simple>
      </cm:setHeader>
      <cm:log
        message="Checking record with UUID '$simple{header.documentIdentifier}' using its standards XSD. Start at $simple{header.beginTime}."
        loggingLevel="INFO"
        logName="org.daobs.task.ValidationChecker"/>

      <!-- Check document against an XSD -->
      <cm:doTry>
        <cm:to uri="validator:WEB-INF/xsd/iso19139/schema.xsd?useDom=false"/>
        <cm:setBody>
          <cm:simple>
            <![CDATA[<add commitWithin="10000">
              <doc>
                <field name="id"><![CDATA[$simple{header.documentIdentifier}]]><![CDATA[]]]]><![CDATA[>]]><![CDATA[</field>
                <field name="schemaValidDate" update="set">$simple{header.beginTime}</field>
                <field name="isSchemaValid" update="set">true</field>
              </doc>
            </add>]]>
          </cm:simple>
        </cm:setBody>
        <cm:to
          uri="file:{{task.validation-checker.folder}}?fileName=xsd-valid-$simple{header.fileNameSuffix}.xml&amp;charset=utf-8"/>
        <cm:doCatch>
          <cm:exception>org.apache.camel.ValidationException</cm:exception>
          <cm:transform>
            <cm:simple>${property.CamelExceptionCaught}</cm:simple>
          </cm:transform>
          <cm:transform>
            <cm:simple>${bodyAs(String)}</cm:simple>
          </cm:transform>
          <cm:log message="Errors are: ${body}. Failure."
                  loggingLevel="INFO"
                  logName="org.daobs.task.ValidationChecker"/>
          <cm:log
            message="'$simple{header.documentIdentifier}' is an invalid document."
            loggingLevel="INFO"
            logName="org.daobs.task.ValidationChecker"/>

          <cm:setBody>
            <cm:simple>
              <![CDATA[<add commitWithin="10000">
              <doc>
                <field name="id"><![CDATA[$simple{header.documentIdentifier}]]><![CDATA[]]]]><![CDATA[>]]><![CDATA[</field>
                <field name="schemaValidDate" update="set">$simple{header.beginTime}</field>
                <field name="isSchemaValid" update="set">false</field>
                <field name="schemaValidReport" update="set"><![CDATA[$simple{body}]]>
              <![CDATA[]]]]><![CDATA[>]]><![CDATA[</field>
              </doc>
            </add>]]>
            </cm:simple>
          </cm:setBody>
          <cm:to
            uri="file:{{task.validation-checker.folder}}?fileName=xsd-invalid-$simple{header.fileNameSuffix}.xml&amp;charset=utf-8"/>
        </cm:doCatch>
        <cm:doFinally>
        </cm:doFinally>
      </cm:doTry>
    </cm:route>


    <cm:route id="route-validation-inspire-checker">
      <cm:from uri="direct:validation-inspire"/>
      <cm:setHeader headerName="documentIdentifier">
        <cm:xpath resultType="java.lang.String">
          /gmd:MD_Metadata/gmd:fileIdentifier/gco:CharacterString/text()
        </cm:xpath>
      </cm:setHeader>
      <cm:setHeader headerName="beginTime">
        <cm:simple>${date:now:yyyyMMdd'T'HH':'mm':'SS}</cm:simple>
      </cm:setHeader>
      <cm:log
        message="Checking record with UUID '$simple{header.documentIdentifier}' using INSPIRE validation service. Start at $simple{header.beginTime}."
        loggingLevel="INFO"
        logName="org.daobs.task.ValidationChecker"/>

      <cm:bean ref="inspireValidationClient" method="validateBody"/>

      <cm:log message="Validated in $simple{body.totalTimeSeconds}s."
              loggingLevel="INFO"
              logName="org.daobs.task.ValidationChecker"/>
      <cm:setBody>
        <cm:simple>
          <![CDATA[<add commitWithin="10000">
              <doc>
                <field name="id"><![CDATA[$simple{header.documentIdentifier}]]><![CDATA[]]]]><![CDATA[>]]><![CDATA[</field>
                <field name="validDate" update="set">$simple{header.beginTime}</field>
                <field name="isValid" update="set">${body.status}</field>
                <field name="completenessIndicator" update="set">${body.completenessIndicator}</field>
                <field name="isAboveThreshold" update="set">${body.isAboveThreshold}</field>
                <field name="validReport" update="set"><![CDATA[${body.report}]]><![CDATA[]]]]><![CDATA[>]]><![CDATA[</field>
                <field name="validInfo" update="set">${body.info} - ${body.completenessIndicator}</field>
              </doc>
            </add>]]>
        </cm:simple>
      </cm:setBody>
      <cm:to
        uri="file:{{task.validation-checker.folder}}?fileName=inspire-validation-$simple{header.fileNameSuffix}.xml&amp;charset=utf-8"/>
    </cm:route>


    <cm:route id="save-validation-status">
      <!--<cm:from uri="direct:save-validation-status"/>-->
      <cm:from
        uri="file:{{task.validation-checker.folder}}?consumer.delay={{task.validation-checker.delay}}"/>
      <cm:log message="Updating index with '$simple{body}' ..."
              loggingLevel="INFO"
              logName="org.daobs.task.ValidationChecker"/>
      <cm:removeHeaders pattern="*"/>
      <cm:setHeader headerName="Exchange.HTTP_URI">
        <cm:simple>{{solr.server.url}}/{{solr.core.data}}/update</cm:simple>
      </cm:setHeader>
      <cm:setHeader headerName="camelHttpMethod">
        <cm:constant>POST</cm:constant>
      </cm:setHeader>
      <cm:setHeader headerName="Content-Type">
        <cm:constant>application/xml</cm:constant>
      </cm:setHeader>
      <cm:to
        uri="http4://solr.server.url?authUsername={{solr.server.user}}&amp;authPassword={{solr.server.password}}&amp;authenticationPreemptive=true&amp;throwExceptionOnFailure=false"/>
      <cm:log message="Solr response: ${body}."
              loggingLevel="DEBUG"
              logName="org.daobs.task.ValidationChecker"/>
    </cm:route>

  </cm:camelContext>

</beans>
