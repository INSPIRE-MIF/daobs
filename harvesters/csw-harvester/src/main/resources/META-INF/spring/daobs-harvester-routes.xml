<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2014-2016 European Environment Agency

    Licensed under the EUPL, Version 1.1 or â€“ as soon
    they will be approved by the European Commission -
    subsequent versions of the EUPL (the "Licence");
    You may not use this work except in compliance
    with the Licence.
    You may obtain a copy of the Licence at:

    https://joinup.ec.europa.eu/community/eupl/og_page/eupl

    Unless required by applicable law or agreed to in
    writing, software distributed under the Licence is
    distributed on an "AS IS" basis,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
    either express or implied.
    See the Licence for the specific language governing
    permissions and limitations under the Licence.

-->
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:cm="http://camel.apache.org/schema/spring"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring
        http://camel.apache.org/schema/spring/camel-spring.xsd">

  <import
    resource="classpath*:META-INF/spring/daobs-harvester-common-routes.xml"/>

  <bean id="bridgePropertyPlaceholder"
        class="org.apache.camel.spring.spi.BridgePropertyPlaceholderConfigurer">
    <property name="location" value="${config.properties.path}"/>
  </bean>

  <bean id="cswHarvester" class="org.daobs.harvester.CswHarvester">
    <property name="maxRecords" value="${harvester.csw.getRecords.maxRecords}"/>
  </bean>

  <bean id="harvesterDetailsAgg"
        class="org.daobs.harvester.HarvesterDetailsAggregate"/>

  <cm:errorHandler id="loggingErrorHandler"
                   type="LoggingErrorHandler"
                   logName="daobs.harvesters.csw"
                   level="DEBUG"/>

  <cm:camelContext
    xmlns:daobs="http://daobs.org"
    xmlns:ogc="http://www.opengis.net/ogc"
    xmlns:csw="http://www.opengis.net/cat/csw/2.0.2"
    id="harvester.csw"
    errorHandlerRef="loggingErrorHandler"
    allowUseOriginalMessage="true"
    useMDCLogging="true">

    <cm:properties>
      <cm:property key="http.proxyHost" value="${http.proxyHost}"/>
      <cm:property key="http.proxyPort" value="${http.proxyPort}"/>
      <cm:property key="http.nonProxyHosts" value="${http.nonProxyHosts}"/>
    </cm:properties>

    <cm:routeContextRef ref="harvester.common"/>

    <cm:threadPoolProfile id="myDefaultProfile"
                          defaultProfile="true"
                          poolSize="30"
                          maxPoolSize="30"/>
    <!--<cm:jmxAgent id="agent" mbeanObjectDomainName="org.daobs"/>-->

    <cm:onException>
      <cm:exception>
        org.apache.camel.component.http4.HttpOperationFailedException
      </cm:exception>
      <cm:continued>
        <cm:constant>true</cm:constant>
      </cm:continued>
      <cm:log message="Oops, something went wrong: $simple{exception.message}."
              loggingLevel="ERROR"
              logName="org.daobs.harvester.CswHarvester"/>
      <cm:log message="$simple{exception.responseBody}"
              loggingLevel="ERROR"
              logName="org.daobs.harvester.CswHarvester"/>
      <cm:log message="$simple{exception.stacktrace}"
              loggingLevel="ERROR"
              logName="org.daobs.harvester.CswHarvester"/>
      <cm:to uri="log:org.daobs.harvester.CswHarvester?showBody=true"/>

    </cm:onException>

    <cm:route id="route-csw-start-from-config-file"
              autoStartup="{{harvester.csw.startup.cli}}">
      <cm:description>
        Start the harvester by loading the configuration file in the
        config folder
      </cm:description>
      <cm:from
        uri="file:{{harvester.csw.config.folder}}?fileName=$simple{property.harvester.csw.config.filename}&amp;noop=true&amp;delay=1000000000"/>
      <cm:to uri="direct:route-start-csw-harvesting"/>
    </cm:route>

    <!--
    Deprecated: Start harvesting when a file is dropped in a folder.
    <cm:route id="route-csw-start-from-task-folder"
              autoStartup="{{harvester.csw.startup.webapp}}">
      <cm:description>
        Start the harvester when a config file is dropped in the
        tasks folder
      </cm:description>
      <cm:from
        uri="file:{{harvester.csw.config.folder}}tasks?delay={{harvester.csw.tasks.delay}}&amp;move=.done&amp;moveFailed=.done"/>
      <cm:to uri="direct:route-start-csw-harvesting"/>
    </cm:route>-->

    <cm:route id="route-csw-start-jms"
              autoStartup="{{harvester.csw.startup.jms}}">
      <cm:from uri="activemq:harvest-csw"/>
      <cm:removeHeaders pattern="*"/>
      <cm:log message="Received JMS message. Starting harvester '$simple{body.harvester.name}'"
              loggingLevel="INFO"
              logName="org.daobs.harvester.CswHarvester"/>
      <cm:setBody>
        <cm:simple>${body.harvester}</cm:simple>
      </cm:setBody>
      <cm:marshal>
        <cm:jaxb prettyPrint="true"
                 contextPath="org.daobs.harvester.config"/>
      </cm:marshal>
      <cm:to uri="direct:route-start-csw-harvesting"/>
    </cm:route>

    <cm:route id="route-start-csw-harvesting">
      <cm:from uri="direct:route-start-csw-harvesting"/>
      <cm:log message="Loading harvesters configuration ..."
              loggingLevel="INFO"
              logName="org.daobs.harvester.CswHarvester"/>
      <cm:convertBodyTo type="org.w3c.dom.Document"/>
      <cm:split parallelProcessing="true">
        <cm:xpath>//daobs:harvester</cm:xpath>
        <cm:to uri="log:org.daobs.harvester.CswHarvester?showBody=true"/>
        <cm:setProperty propertyName="harvesterConfig">
          <cm:xpath resultType="org.w3c.dom.Document">daobs:harvester</cm:xpath>
        </cm:setProperty>
        <cm:setProperty propertyName="harvesterUrl">
          <cm:xpath resultType="java.lang.String">normalize-space(daobs:harvester/daobs:url)</cm:xpath>
        </cm:setProperty>
        <cm:setProperty propertyName="harvesterUuid">
          <cm:xpath resultType="java.lang.String">normalize-space(daobs:harvester/daobs:uuid)</cm:xpath>
        </cm:setProperty>
        <cm:setProperty propertyName="workers-uuid">
          <cm:xpath resultType="java.lang.String">normalize-space(daobs:harvester/daobs:uuid)</cm:xpath>
        </cm:setProperty>
        <cm:setProperty propertyName="harvesterTerritory">
          <cm:xpath resultType="java.lang.String">normalize-space(daobs:harvester/daobs:territory)</cm:xpath>
        </cm:setProperty>
        <cm:setProperty propertyName="harvesterNbRecordsPerPage">
          <cm:xpath resultType="java.lang.String">if (daobs:harvester/daobs:nbOfRecordsPerPage) then normalize-space(daobs:harvester/daobs:nbOfRecordsPerPage) else -1</cm:xpath>
        </cm:setProperty>
        <cm:setProperty propertyName="harvesterFolder">
          <cm:xpath resultType="java.lang.String">normalize-space(daobs:harvester/daobs:folder)</cm:xpath>
        </cm:setProperty>
        <cm:setProperty propertyName="harvesterName">
          <cm:xpath resultType="java.lang.String">normalize-space(daobs:harvester/daobs:name)</cm:xpath>
        </cm:setProperty>

        <!-- <cm:choice>
           <cm:when>
             <cm:xpath>daobs:harvester/daobs:frequency</cm:xpath>
             <cm:setHeader headerName="frequency">
               <cm:xpath resultType="java.lang.String">normalize-space(daobs:harvester/daobs:frequency)</cm:xpath>
             </cm:setHeader>
             <cm:log message="Scheduled delivery for harvester '$simple{header.harvesterName}', frequency is '$simple{header.frequency}' ..."
                     loggingLevel="INFO"
                     logName="org.daobs.harvester.CswHarvester"/>

             <cm:to uri="direct:harvestRunNode"/>
           </cm:when>
           <cm:otherwise>
             <cm:to uri="direct:harvestRunNode"/>
           </cm:otherwise>
         </cm:choice>-->


        <cm:to uri="direct:harvestRunNode"/>
      </cm:split>
    </cm:route>

    <cm:route id="route-csw-run">
      <cm:from uri="direct:harvestRunNode"/>


      <cm:choice>
        <cm:when>
          <cm:xpath>daobs:harvester/daobs:filter/ogc:Filter</cm:xpath>
          <cm:setProperty propertyName="harvesterFilter">
            <cm:xpath resultType="org.w3c.dom.Document">
              daobs:harvester/daobs:filter/ogc:Filter
            </cm:xpath>
          </cm:setProperty>
        </cm:when>
        <cm:otherwise>
          <cm:setProperty propertyName="harvesterFilter">
            <cm:simple resultType="org.w3c.dom.Document"><![CDATA[<Filter xmlns="http://www.opengis.net/ogc"/>]]></cm:simple>
          </cm:setProperty>
        </cm:otherwise>
      </cm:choice>
      <cm:setProperty propertyName="harvesterBeginTime">
        <cm:simple>${date:now:yyyyMMdd'T'HH':'mm':'SS}</cm:simple>
      </cm:setProperty>


      <cm:log
        message="Harvesting node '$simple{property.harvesterName}' ($simple{property.harvesterTerritory}) at '$simple{property.harvesterURL}' [Number of records requested per page in config: $simple{property.harvesterNbRecordsPerPage}]"
        loggingLevel="INFO"
        logName="org.daobs.harvester.CswHarvester"/>
      <cm:log message="CSW filter is $simple{property.harvesterFilter}"
              loggingLevel="INFO"
              logName="org.daobs.harvester.CswHarvester"/>
      <cm:log message="Starting at $simple{property.harvesterBeginTime}"
              loggingLevel="INFO"
              logName="org.daobs.harvester.CswHarvester"/>

      <cm:to uri="direct:harvestNode"/>
    </cm:route>

    <cm:route id="route-csw-hits">
      <cm:description>
        Send a GetRecords request (cf. csw-get-records-hits.xml)
        in order to retrieve the max number of records to harvest.
        The numberOfRecordsMatched attribute of the response is
        retrieved.
      </cm:description>
      <cm:from uri="direct:harvestNode"/>
      <cm:bean ref="cswHarvester" method="initialize"/>
      <cm:log
        message="Initializing $simple{property.harvesterUrl} ..."
        loggingLevel="INFO"
        logName="org.daobs.harvester.CswHarvester"/>
      <cm:setProperty propertyName="isFile">
        <cm:simple resultType="boolean">${property.harvesterUrl} contains 'file://'</cm:simple>
      </cm:setProperty>

      <cm:log
        message="Initializing $simple{property.isFile} ..."
        loggingLevel="INFO"
        logName="org.daobs.harvester.CswHarvester"/>
      <!-- Load file or URL -->
      <cm:choice>
        <cm:when>
          <!--<cm:simple resultType="boolean">${property.harvesterUrl} contains 'file://'</cm:simple>-->
          <cm:simple>${property.isFile}</cm:simple>
          <!--<cm:bean ref="cswHarvester" method="loadFile"/>-->
          <cm:log
            message="Loading file content $simple{property.harvesterUrl}..."
            loggingLevel="INFO"
            logName="org.daobs.harvester.CswHarvester"/>
          <cm:setBody>
            <cm:simple>bean:cswHarvester?method=loadFile
            </cm:simple>
          </cm:setBody>
          <cm:convertBodyTo type="org.w3c.dom.Document"/>
          <cm:bean ref="harvesterDetailsAgg"
                   method="doTransform($simple{body}, $simple{property.harvesterConfig})"/>
          <cm:to uri="direct-vm:indexDocuments"/>
        </cm:when>
        <cm:otherwise>
          <cm:log
            message="Query $simple{property.harvesterUrl} to get numberOfRecordsMatched ..."
            loggingLevel="INFO"
            logName="org.daobs.harvester.CswHarvester"/>

          <!-- Add logger for time http://camel.apache.org/eventnotifier-to-log-details-about-all-sent-exchanges.html -->
          <cm:setHeader headerName="camelHttpMethod">
            <cm:constant>POST</cm:constant>
          </cm:setHeader>
          <cm:setHeader headerName="Content-Type">
            <cm:constant>application/xml</cm:constant>
          </cm:setHeader>
          <cm:setBody>
            <cm:simple>bean:cswHarvester?method=generateGetRecordsHitsQuery</cm:simple>
          </cm:setBody>
          <cm:to uri="log:org.daobs.harvester.CswHarvester?showBody=true"/>
          <cm:setHeader headerName="Exchange.HTTP_URI">
            <cm:simple>${property.harvesterUrl}</cm:simple>
          </cm:setHeader>
          <!--
          The pl CSW looks to filter on user agent name
          and camel was not having any response body for obscure reason?
          Same for lv node which is filtering if User-Agent is set.
          In some case, it needs to be removed or activated.
          TODO: Add configuration option at node level.
          -->
          <cm:setHeader headerName="User-Agent">
            <cm:constant>daobs/0.0.1</cm:constant>
          </cm:setHeader>
          <cm:to uri="http4://csw.server.url"/>

        </cm:otherwise>
      </cm:choice>

      <cm:convertBodyTo type="org.w3c.dom.Document"/>
      <cm:choice>
        <cm:when>
          <!-- If records found, next route is direct:cswGetRecords. -->
          <cm:xpath>/csw:GetRecordsResponse/csw:SearchResults[@numberOfRecordsMatched > 0]</cm:xpath>
          <cm:setProperty propertyName="numberOfRecordsMatched">
            <cm:xpath resultType="java.lang.String">/csw:GetRecordsResponse/csw:SearchResults/@numberOfRecordsMatched</cm:xpath>
          </cm:setProperty>
          <cm:log
            message="$simple{property.numberOfRecordsMatched} record(s) to harvest."
            loggingLevel="INFO"
            logName="org.daobs.harvester.CswHarvester"/>
          <cm:to
            uri="bean:cswHarvester?method=setNumberOfRecords(${property.harvesterUrl}, ${property.numberOfRecordsMatched})"/>
          <cm:to uri="direct:cswGetRecords"/>
        </cm:when>
        <cm:when>
          <cm:xpath>/csw:GetRecordsResponse/csw:SearchResults[@numberOfRecordsMatched =
            0]</cm:xpath>
          <cm:log message="No record found."
                  loggingLevel="INFO"
                  logName="org.daobs.harvester.CswHarvester"/>
        </cm:when>
        <cm:otherwise>
          <cm:log
            message="Probably an exception occurred. Check CSW response: ${body}"
            loggingLevel="INFO"
            logName="org.daobs.harvester.CswHarvester"/>
        </cm:otherwise>
      </cm:choice>
    </cm:route>


    <cm:route id="route-csw-get-records"
              shutdownRunningTask="CompleteAllTasks">
      <cm:description>Based on the total number of records
        to be harvested, retrieve records per page and index
        them in ES. All records are removed from the indexed
        when the task starts.

        TODO: Improve update strategy.
      </cm:description>
      <cm:from uri="direct:cswGetRecords"/>
      <cm:log message="Harvesting records ..."
              loggingLevel="INFO"
              logName="org.daobs.harvester.CswHarvester"/>
      <!--<cm:to uri="direct:indexDeleteDocuments"/>-->
      <cm:split>
        <cm:method bean="cswHarvester" method="getPages"/>
        <cm:log
          message="Processing page $simple{property.CamelSplitIndex} / $simple{bean:cswHarvester?method=getNumberOfPages}"
          loggingLevel="INFO"
          logName="org.daobs.harvester.CswHarvester"/>
        <cm:log message="GetRecords request ..."
                loggingLevel="INFO"
                logName="org.daobs.harvester.CswHarvester"/>
        <cm:setProperty propertyName="indexingIndex">
          <cm:simple>${property.CamelSplitIndex}</cm:simple>
        </cm:setProperty>
        <cm:setHeader headerName="cmHttpMethod">
          <cm:constant>POST</cm:constant>
        </cm:setHeader>
        <cm:setHeader headerName="Content-Type">
          <cm:constant>application/xml</cm:constant>
        </cm:setHeader>
        <cm:setBody>
          <cm:simple>bean:cswHarvester?method=generateGetRecordsQuery
          </cm:simple>
        </cm:setBody>
        <cm:to uri="log:org.daobs.harvester.CswHarvester?showBody=true"/>
        <cm:setHeader headerName="Exchange.HTTP_URI">
          <cm:simple>${header.harvesterUrl}</cm:simple>
        </cm:setHeader>
        <!-- The polish CSW looks to filter on user agent name
        and camel was not having any response body ? -->
        <cm:setHeader headerName="User-Agent">
          <cm:constant>daobs/0.0.1</cm:constant>
        </cm:setHeader>
        <cm:to uri="http4://csw.server.url"/>
        <!--<cm:to uri="xslt:metadata-iso19139.xsl?saxon=true&amp;output=DOM"/>-->
        <cm:log message="GetRecords response received. Indexing records ..."
                loggingLevel="INFO"
                logName="org.daobs.harvester.CswHarvester"/>
        <cm:setHeader headerName="camelHttpMethod">
          <cm:constant>POST</cm:constant>
        </cm:setHeader>
        <cm:setHeader headerName="Content-Type">
          <cm:constant>application/xml</cm:constant>
        </cm:setHeader>
        <cm:setBody>
          <cm:simple>${body}</cm:simple>
        </cm:setBody>
        <cm:convertBodyTo type="org.w3c.dom.Document"/>
        <!-- TODO: Add CSW request to the document -->
        <cm:bean ref="harvesterDetailsAgg"
                 method="doTransform($simple{body}, $simple{property.harvesterConfig})"/>
        <!--method="doTransform($simple{body}, $simple{header.harvesterUrl}, $simple{header.harvesterTerritory})"/>-->
        <cm:multicast stopOnException="false"
                      parallelProcessing="false">
          <!-- Backup response as XML file
          TODO &amp;preMove=inprogress&amp;move=done
          -->
          <cm:to
            uri="file:{{data.dir}}?fileName=harvested_data/csw/$simple{property.harvesterFolder}/$simple{date:now:yyyyMMdd}-$simple{property.CamelSplitIndex}.xml&amp;charset=utf-8"/>
          <cm:to uri="direct-vm:indexDocuments"/>
        </cm:multicast>
      </cm:split>

      <cm:setProperty propertyName="harvesterEndTime">
        <cm:simple>${date:now:yyyyMMdd'T'HH':'mm':'SS}</cm:simple>
      </cm:setProperty>


      <cm:log
        message="End harvesting for node '$simple{property.harvesterName}' ($simple{property.harvesterTerritory})"
        loggingLevel="INFO"
        logName="org.daobs.harvester.CswHarvester"/>
      <cm:log message="Ending at $simple{property.harvesterEndTime}"
              loggingLevel="INFO"
              logName="org.daobs.harvester.CswHarvester"/>
      <cm:log
        message="Ellapsed time $simple{property.harvesterEndTime} - $simple{property.harvesterBeginTime}"
        loggingLevel="INFO"
        logName="org.daobs.harvester.CswHarvester"/>

      <cm:log
        message="Sending message to task-analyze queue for notification of ending '$simple{property.harvesterName}' ($simple{property.harvesterTerritory})"
        loggingLevel="INFO"
        logName="org.daobs.harvester.CswHarvester"/>

      <cm:setBody>
        <cm:simple>+harvesterUuid:\"${property.harvesterUuid}\"</cm:simple>
      </cm:setBody>
      <cm:multicast stopOnException="false"
                    parallelProcessing="false">
        <cm:to uri="activemq:queue:task-analyze?jmsMessageType=Text"/>
        <cm:to uri="activemq:queue:task-validate?jmsMessageType=Text"/>
        <!--<cm:to uri="activemq:queue:task-db-validate?jmsMessageType=Text"/>-->
        <!--<cm:to uri="activemq:queue:etf-task-validate?jmsMessageType=Text"/>-->
      </cm:multicast>
    </cm:route>
  </cm:camelContext>
</beans>
